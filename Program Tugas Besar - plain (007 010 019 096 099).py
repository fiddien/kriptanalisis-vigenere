# -*- coding: utf-8 -*-
"""TUBES KRIPTO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13BBt8JjaQInWwv0aOWnELFngraZwifJY
"""

from urllib.request import urlopen
import re
import numpy as np
import pandas as pd

"""# 1. Membuat Tabel Peluang Frekuensi Bahasa Sunda"""

# Membuka file .txt berisi teks asli dan menyimpannya sebagai string pada variabel "data"
data = urlopen('https://raw.githubusercontent.com/ilmaaliyaf/kriptanalisis-vigenere/main/sunda_example.txt').read().decode('utf-8')
print(data[:100])

# Membersihkan "data" dari semua karakter (termasuk whitespace) kecuali alfabet serta mengubah tiap karakter menjadi lowercase
data = re.sub('[\W_]+', '', data).lower()
data = re.sub('έ', 'é', data)
data = re.sub('\d+', '', data)
print(data)

#Menghitung Frekuensi Kemunculan Huruf pada Text
counts_dict = {}
for c in list(data):
  if c.upper() not in counts_dict:
    counts_dict[c.upper()] = 0
  counts_dict[c.upper()] += 1

# menyortir kamus
counts_dict = dict(sorted(counts_dict.items()))

#Mengubah dari dict ke dataframe
dffrek=pd.DataFrame.from_dict(counts_dict,orient='index', columns=['Frekuensi'])

#Menghitung Peluang Dari Kemunculan Huruf
total = dffrek['Frekuensi'].sum()
peluang=[]
peluang=(dffrek['Frekuensi']/total)

#Menggabungkan Column Frekuensi dan Peluang Kemunculan Huruf
dffrek.rename(columns={'Frekuensi':'Frekuensi '}, inplace=True)
gabfrekpel=pd.concat([dffrek, peluang], axis=1)
gabfrekpel=gabfrekpel.sort_index()
gabfrekpel.rename(columns={'Frekuensi':'Peluang'}, inplace=True)
print(gabfrekpel)
print(gabfrekpel['Peluang'].sum())

# Mengubah nilai-nilai peluang menjadi array 1d
prob = np.array(list(peluang.values))
total_alph = len(prob)
prob

# Menghitung peluang kemunculan huruf
P = np.sum(np.square(prob))
P

"""# 2. Enkripsi Kata-asal Berbahasa Sunda"""

# Mendefinisikan fungsi penghitung frekuensi huruf
def freq(s):
    ''' Menghitung frekuensi huruf pada string s '''
    fr = {i : s.count(i) for i in set(s)}
    for c in counts_dict: # kamus dari section 1
        if c not in fr:
            fr[c] = 0
    return dict(sorted(fr.items()))
    
# Fungsi pengubah huruf menjadi angka
def ConvertToNum(string):
    '''input s berupa string, output berupa list integer'''
    return [26 if x=='é' else ord(x)-97 for x in string]

# Fungsi pengubah angka menjadi huruf
def ConvertToText(num_list):
    '''input n berupa list integer, output berupa string'''
    return ''.join([chr(ord('é'.upper())) if x==26 else chr(x+65) for x in num_list])

# Fungsi enkripsi sandi Vigenre
def EncryptVigenere(plain_text, key_text):
    '''input plain_text dan key berupa string, output berupa string'''
    plain_text_num = ConvertToNum(plain_text)
    key_num = ConvertToNum(key_text)
    m = len(key_num)
    cipher_text_num = []
    for i in range(len(plain_text_num)):
        cipher_text_num.append((plain_text_num[i] + key_num[i%m]) % total_alph)
    return ConvertToText(cipher_text_num)

# Fungsi dekripsi sandi Vigenere
def DecryptVigenere(cipher_text, key_text):
    '''input cipher_text dan key berupa string, output berupa string'''
    cipher_text_num = ConvertToNum(cipher_text.lower())
    key_num = ConvertToNum(key_text.lower())
    m = len(key_num)
    plain_text_num = []
    for i in range(len(cipher_text_num)):
        plain_text_num.append((cipher_text_num[i] - key_num[i%m]) % total_alph)
    return ConvertToText(plain_text_num).lower()

# Mendefinisikan kata-asal berbahasa sunda
plaintext = '''Harta pada naréangan harti pada nyararungsi sabab duanana guna
harti bisa méré bukti harta pon kitu deui bisa ngabul nu di maksud
neudunan sakahayang tapi harta gancang leungit mungguh harti mangfaat dunya akhérat
'''
# Membersihkan kata-asal
plaintext = re.sub('[\W_]+', '', plaintext).lower()
print(plaintext)

# Mendefinisikan kata kunci
key = 'wayahna'
len_k = len(key)
print(key)

# Mengenkripsi kata asal, vigenere chiper, y_i = x_i + k_i
ciphertext = EncryptVigenere(plaintext,key)
print(ciphertext)

# Mengecek hasil enkripsi dengan cara dekripsi langsung
print(DecryptVigenere(ciphertext,key))

"""# 3. Tes Kasiski"""

import operator

# Mendata semua kombinasi 3-huruf di ciphertext
tri = []
for i in range(len(ciphertext)-2):
    tri.append(ciphertext[i:i+3])
f_tri = freq(tri)    

# Memfilter kombinasi 3-huruf yang frekuensinya lebih dari 1
sorted_tri = list(sorted(f_tri.items(), key=operator.itemgetter(1)))
multp_tri = [sorted_tri[i] for i in range(len(sorted_tri)) if sorted_tri[i][1] > 1]
print(multp_tri)

# Menghitung selisih posisi untuk tiap 3-huruf
pos = []
diff = []
for i in range(len(multp_tri)):
    pos.append([m.start() for m in re.finditer(multp_tri[i][0], ciphertext)])
    diff.append(pos[i][1] - pos[i][0])
    print(multp_tri[i][0], pos[i], diff[i])

# Mencari gcd dari tiap selisih posisi (opsional)

def GCD(a, b):
    ''' mencari faktor persekutuan terbesar antara a dan b'''
    if b == 0:
        return a
    else:
        return GCD(b, a % b)

gcd = GCD(diff[1],diff[2]) 
for i in range(3,len(diff)): 
    gcd=GCD(gcd,diff[i]) 
      
print(GCD(84,112))

"""# 4. Tes Indeks Koinsiden Bersama"""

def cutter(s,m):
    ''' Memotong string s menjadi m potongan string '''
    n = len(s)
    chunks = [''] * m
    for k in range(m):
        l = list(range(k, n, m))
        chunks[k] = ''.join([s[x] for x in l])
    return chunks

def ic(s):
    ''' Menghitung indeks koinsidensi dari string s'''
    n = len(s)
    fr = freq(s)
    sum = 0
    for i in fr:
        sum += fr[i] * (fr[i]-1)
    return sum/(n*(n-1))

def avg_ic(ciphertext):
    ''' Menebak kemungkinan panjang key
        merata-ratakan indeks koinsiden setiap chunk pada ciphertext_cut
        output berupa panjang key m'''
    m = 0
    ic_avg = 0
    while ic_avg < P:
        m += 1
        ciphertext_cut = cutter(ciphertext,m)
        s = 0
        for i in range(m):
            s += ic(ciphertext_cut[i])
        ic_avg = s/m
        print('m =',m, '| avg ic:',ic_avg)
    return m

def mic(ct,m):
    ''' Menghitung mutual index of coincidence dari string ct dan panjang key m
        Output berupa 2d array matrix MIc'''
    len_ct = len(ct)
    n_ = len_ct/m 
    ct_cut = cutter(ct,m) #memotong ciphertext

    # Menghitung frekuensi huruf di ciphertext_cut dan membuatnya menjadi list
    f = np.zeros([m, total_alph])
    for i in range(m):
        f[i] = np.array(list(freq(ct_cut[i]).values()))

    # membuat matriks Mutual Index Coincidence
    mic_matrix = np.zeros([m, total_alph])
    for j in range(m): # mencari kunci digit ke-j
        for g in range(total_alph): # dilihat peluang koinsiden antara alphabet ke g dan ke i
            sum = 0
            for i in range(total_alph):
                sum += prob[i] * f[j][ (i+g) % total_alph ] # (f/n)*f'
            mic_matrix[j][g] = sum/(n_)
    return mic_matrix

# Menebak panjang key
m = avg_ic(ciphertext)

# Membentuk matriks indeks koinsiden
MIc_matrix = mic(ciphertext,m)
pd.DataFrame(MIc_matrix)

# Mencari nilai maksimum di antara semua MIc untuk dipilih sbg digit k di key
K = np.argmax(MIc_matrix,1)

# Mencetak Huruf terpilih sebagai key beserta MIc-nya
print('Huruf \t MIc')
for i in range(m):
    print(K[i],'\t',MIc_matrix[i,K[i]])
Key = ConvertToText(K)
print('Kunci:\t', Key)

# Dekripsi kata sandi dengan key terpilih
ptext = DecryptVigenere(ciphertext,Key)
print('Kata terdekripsi:\n', ptext)